Техническое задание: Приложение для совместного редактирования кода в реальном времени (Live Coding Editor)
1. Общее описание
Необходимо разработать веб-приложение для совместного редактирования кода в реальном времени. Основные особенности:

Автоматическое создание уникальной "песочницы" (файла) при открытии страницы.

Возможность совместного редактирования кода несколькими пользователями с синхронизацией через WebSockets.

Поддержка подсветки синтаксиса для популярных языков программирования.

Простое управление состоянием приложения (Redux Toolkit + опционально Redux Saga).

Хранение данных в Postgres с автоматическим удалением через 24 часа.

2. Технологический стек
Backend: NestJS (REST API + WebSockets)

Frontend: React + TypeScript

State Management: Redux Toolkit (+ Redux Saga по желанию)

База данных: PostgreSQL + Sequelize (ORM)

Реальное время: Socket.io

Подсветка кода: библиотека react-syntax-highlighter или prismjs

Деплой и инфраструктура: Docker + Docker-compose

Дополнительно:

uuid для генерации уникальных ID файлов.

react-router-dom для навигации.

axios для HTTP-запросов.

3. Функциональные требования
3.1. Основной редактор кода
Одно большое текстовое поле с поддержкой:

Подсветки синтаксиса (минимум: JavaScript/TypeScript, Python).

Возможности выбора языка программирования.

Автосохранения изменений (debounce ~1 сек).

Отображение списка активных пользователей (никнеймы или анонимные ID).

3.2. Система совместного редактирования
При открытии страницы /:

Генерируется уникальный UUID (например, /room/abc123).

Создается новая сущность в БД (поле: id, code, language, createdAt).

Пользователь перенаправляется на /room/abc123.

При заходе на существующий URL (/room/abc123):

Загружается текущий код из БД.

Подключаются WebSockets для синхронизации изменений в реальном времени.

Изменения кода отображаются у всех участников без перезагрузки страницы.

3.3. База данных
Таблица code_files:

sql
CREATE TABLE code_files (
  id UUID PRIMARY KEY,
  code TEXT DEFAULT '',
  language VARCHAR(32) DEFAULT 'javascript',
  createdAt TIMESTAMP DEFAULT NOW(),
  expiresAt TIMESTAMP DEFAULT (NOW() + INTERVAL '24 hours')
);
Автоматическая очистка записей через 24 часа (можно через Cron-задачу в NestJS).

3.4. WebSockets (Socket.io)
События:

CODE_UPDATE – синхронизация кода между клиентами.

USER_JOIN / USER_LEAVE – уведомления о подключении/отключении.

Оптимизация: дебаунс отправки изменений (чтобы не спамить сервер).

3.5. Дополнительные функции (по желанию)
Возможность задавать никнейм.

История изменений (запись diff-ов).

Экспорт кода в файл.

4. Нефункциональные требования
Производительность: задержка синхронизации ≤500 мс.

Масштабируемость: Docker-контейнеры должны легко разворачиваться.

Безопасность:

Нет аутентификации (все анонимно).

Валидация входных данных на бекенде.

5. Интерфейс
Макет:

text
[Выбор языка] [ID комнаты: abc123] [Счетчик пользователей: 3]
--------------------------------------------
| <Редактор кода (монокспейс, 14px)>       |
|                                          |
|                                          |
|                                          |
--------------------------------------------
6. Инфраструктура
docker-compose.yml для запуска:

yaml
services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_PASSWORD: password
  backend:
    build: ./backend
    ports: ["3000:3000"]
  frontend:
    build: ./frontend
    ports: ["80:80"]
7. Этапы разработки
Настройка Docker и БД.

Реализация REST API (NestJS + Sequelize).

Подключение WebSockets.

Создание редактора кода на React.

Интеграция Redux Toolkit.

Тестирование совместного редактирования.

Деплой и оптимизация.

8. Критерии приемки
Приложение работает в Docker-контейнерах.

Код синхронизируется между ≥3 пользователями.

Данные удаляются через 24 часа.

Нет критических багов (потеря кода, падение сервера).
